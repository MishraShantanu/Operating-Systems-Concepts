/*
Assignment 2 Part C -- Documentation File

Computer Science 332.3
Prof: Dr. Derek Eager
University of Saskatchewan - Arts & Science
	Department of Computer Science
A project by: Spencer Tracy | Spt631 | 11236962 and Shantanu Mishra | Shm572 | 11255997
__________________________________________________
 */
 
						Building of a memory manager
						
-	mem.c & mem.h are a library archive to instantiate (using mmap() from sys/mman.h) 
	a block of memory of a given size and allowing operations by the caller on this block of memory. 
	
-	This memory manager is implemented via a doubly linked list – with each block containing both 
	a 16-byte header and a 16-byte footer, each of which store the size of the block – and a pointer to either
	a magicNumber (indicating this block is free for use) or a pointer to the next block (in the case of the header) 
	or the previous block (in the case of the footer) when the block is occupied.


Functions contained:
	int M_Init(int size)
		-- Initializes the memory manager, with the size (in bytes) given by int size.
			-- Makes a call to mmap for the given size (rounded up to the closest multiple of 16).
		-- M_Init must be called before any of the other functions can be used (M_Alloc, M_Free, M_Display).
		-- M_Init will return 0 when the call is successful, and -1 in the event of failure (ie, mmap failed to allocate the desired space).
	
	
void *M_Alloc(int size);
		-- Allocates a block of memory (based on the given int size rounded up to the nearest multiple of 16) for use by the user.
		-- Returns either a NULL pointer when M_Alloc failed (For example, when the request cannot be fulfilled due to no suitable block found
		   or when M_Init has not yet been called).
		-- Otherwise, will return a void pointer to the allocated writable portion of a block for use by the user.
		-- M_Alloc will add an extra 32 bytes to each request to support the use of headers and footers.

	
int M_Free(void *pointer);
	-- Given a pointer (generated by the user via the M_Alloc call), it will mark the given block of memory as free for writing.
	-- Function will check whether the preceding block and/or the proceeding block of memory are free – in which case, it will coalesce them into single block. 
	-- If M_Free could not complete its task successfully, M_Free will return -1 (ie, given an invalid or NULL pointer, M_Free is called when M_Init has not yet been called, etc).
	-- Otherwise, M_Free will return 0.
	

void M_Display();
	-- Traverses the linked list of memory blocks (initialized by M_Init), printing to the console where each block starts, 
		where it ends, and the size of each block (omitting the extra 32 bytes of the headers and footers).
	-- Also prints the total size of the freeList and the range of memory it has access to from initial allocation. 
	-- Denotes for each block whether the block is free or occupied.


libmemtest.c  -- A testing program to ensure the proper functioning of M_Init, M_Alloc, M_Free, M_Display. 

makefile – will create the library archive out of mem.c and mem.h – and will also include libmemtest.c for testing purposes. 
		   Stores the library archive as libmem.a.
		 - Includes a .PHONY clean command to remove object and archive files. 
		

Known bugs: None.

Known weaknesses: None.

Flow of execution:
	M_Init must be called before any other functions can be used.
	M_Alloc should be called to request an allocation of a new block of memory.
	M_Free should be given a pointer (from M_Alloc’s return) in order to free the desired block.
	M_Display can be called given M_Init has been called previously to M_Display.


